/*
* generated by Xtext
*/
package questions.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import questions.services.QuestionsDSLGrammarAccess;

public class QuestionsDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private QuestionsDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected questions.ui.contentassist.antlr.internal.InternalQuestionsDSLParser createParser() {
		questions.ui.contentassist.antlr.internal.InternalQuestionsDSLParser result = new questions.ui.contentassist.antlr.internal.InternalQuestionsDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQuestionAccess().getAlternatives(), "rule__Question__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getQuestionSetAccess().getGroup(), "rule__QuestionSet__Group__0");
					put(grammarAccess.getSingleChoiceAccess().getGroup(), "rule__SingleChoice__Group__0");
					put(grammarAccess.getMultipleChoiceAccess().getGroup(), "rule__MultipleChoice__Group__0");
					put(grammarAccess.getIntValueQuestionAccess().getGroup(), "rule__IntValueQuestion__Group__0");
					put(grammarAccess.getAnswerAccess().getGroup(), "rule__Answer__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getQuestionSetAccess().getNameAssignment_1(), "rule__QuestionSet__NameAssignment_1");
					put(grammarAccess.getQuestionSetAccess().getQuestionsAssignment_2(), "rule__QuestionSet__QuestionsAssignment_2");
					put(grammarAccess.getQuestionSetAccess().getQuestionsAssignment_3(), "rule__QuestionSet__QuestionsAssignment_3");
					put(grammarAccess.getSingleChoiceAccess().getNameAssignment_1(), "rule__SingleChoice__NameAssignment_1");
					put(grammarAccess.getSingleChoiceAccess().getTextAssignment_2(), "rule__SingleChoice__TextAssignment_2");
					put(grammarAccess.getSingleChoiceAccess().getAnswersAssignment_4(), "rule__SingleChoice__AnswersAssignment_4");
					put(grammarAccess.getSingleChoiceAccess().getAnswersAssignment_5(), "rule__SingleChoice__AnswersAssignment_5");
					put(grammarAccess.getMultipleChoiceAccess().getNameAssignment_1(), "rule__MultipleChoice__NameAssignment_1");
					put(grammarAccess.getMultipleChoiceAccess().getTextAssignment_2(), "rule__MultipleChoice__TextAssignment_2");
					put(grammarAccess.getMultipleChoiceAccess().getAnswersAssignment_4(), "rule__MultipleChoice__AnswersAssignment_4");
					put(grammarAccess.getMultipleChoiceAccess().getAnswersAssignment_5(), "rule__MultipleChoice__AnswersAssignment_5");
					put(grammarAccess.getIntValueQuestionAccess().getNameAssignment_1(), "rule__IntValueQuestion__NameAssignment_1");
					put(grammarAccess.getIntValueQuestionAccess().getTextAssignment_2(), "rule__IntValueQuestion__TextAssignment_2");
					put(grammarAccess.getIntValueQuestionAccess().getExpectedValueAssignment_4(), "rule__IntValueQuestion__ExpectedValueAssignment_4");
					put(grammarAccess.getAnswerAccess().getIsCorrectAssignment_1(), "rule__Answer__IsCorrectAssignment_1");
					put(grammarAccess.getAnswerAccess().getTextAssignment_3(), "rule__Answer__TextAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			questions.ui.contentassist.antlr.internal.InternalQuestionsDSLParser typedParser = (questions.ui.contentassist.antlr.internal.InternalQuestionsDSLParser) parser;
			typedParser.entryRuleQuestionSet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public QuestionsDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(QuestionsDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
