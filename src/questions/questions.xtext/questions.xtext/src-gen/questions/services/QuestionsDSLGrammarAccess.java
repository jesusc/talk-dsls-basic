/*
* generated by Xtext
*/
package questions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QuestionsDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QuestionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cQuestionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionsQuestionParserRuleCall_2_0 = (RuleCall)cQuestionsAssignment_2.eContents().get(0);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		
		//QuestionSet:
		//	"questions" name=EString questions+=Question questions+=Question*;
		public ParserRule getRule() { return rule; }

		//"questions" name=EString questions+=Question questions+=Question*
		public Group getGroup() { return cGroup; }

		//"questions"
		public Keyword getQuestionsKeyword_0() { return cQuestionsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_2() { return cQuestionsAssignment_2; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_2_0() { return cQuestionsQuestionParserRuleCall_2_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleChoiceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleChoiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Question:
		//	SingleChoice | MultipleChoice | IntValueQuestion;
		public ParserRule getRule() { return rule; }

		//SingleChoice | MultipleChoice | IntValueQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleChoice
		public RuleCall getSingleChoiceParserRuleCall_0() { return cSingleChoiceParserRuleCall_0; }

		//MultipleChoice
		public RuleCall getMultipleChoiceParserRuleCall_1() { return cMultipleChoiceParserRuleCall_1; }

		//IntValueQuestion
		public RuleCall getIntValueQuestionParserRuleCall_2() { return cIntValueQuestionParserRuleCall_2; }
	}

	public class SingleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswersAnswerParserRuleCall_4_0 = (RuleCall)cAnswersAssignment_4.eContents().get(0);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		
		//SingleChoice:
		//	"single" name=ID text=EString ":" answers+=Answer answers+=Answer*;
		public ParserRule getRule() { return rule; }

		//"single" name=ID text=EString ":" answers+=Answer answers+=Answer*
		public Group getGroup() { return cGroup; }

		//"single"
		public Keyword getSingleKeyword_0() { return cSingleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//answers+=Answer
		public Assignment getAnswersAssignment_4() { return cAnswersAssignment_4; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_4_0() { return cAnswersAnswerParserRuleCall_4_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }
	}

	public class MultipleChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultipleChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswersAnswerParserRuleCall_4_0 = (RuleCall)cAnswersAssignment_4.eContents().get(0);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		
		//MultipleChoice:
		//	"multiple" name=ID text=EString ":" answers+=Answer answers+=Answer*;
		public ParserRule getRule() { return rule; }

		//"multiple" name=ID text=EString ":" answers+=Answer answers+=Answer*
		public Group getGroup() { return cGroup; }

		//"multiple"
		public Keyword getMultipleKeyword_0() { return cMultipleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//answers+=Answer
		public Assignment getAnswersAssignment_4() { return cAnswersAssignment_4; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_4_0() { return cAnswersAnswerParserRuleCall_4_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }
	}

	public class IntValueQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValueQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cExpectingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpectedValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpectedValueEIntParserRuleCall_4_0 = (RuleCall)cExpectedValueAssignment_4.eContents().get(0);
		
		//IntValueQuestion:
		//	"integer" name=ID text=EString "expecting" expectedValue=EInt;
		public ParserRule getRule() { return rule; }

		//"integer" name=ID text=EString "expecting" expectedValue=EInt
		public Group getGroup() { return cGroup; }

		//"integer"
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//"expecting"
		public Keyword getExpectingKeyword_3() { return cExpectingKeyword_3; }

		//expectedValue=EInt
		public Assignment getExpectedValueAssignment_4() { return cExpectedValueAssignment_4; }

		//EInt
		public RuleCall getExpectedValueEIntParserRuleCall_4_0() { return cExpectedValueEIntParserRuleCall_4_0; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsCorrectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsCorrectXKeyword_1_0 = (Keyword)cIsCorrectAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//Answer:
		//	"[" isCorrect?="X"? "]" text=EString;
		public ParserRule getRule() { return rule; }

		//"[" isCorrect?="X"? "]" text=EString
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//isCorrect?="X"?
		public Assignment getIsCorrectAssignment_1() { return cIsCorrectAssignment_1; }

		//"X"
		public Keyword getIsCorrectXKeyword_1_0() { return cIsCorrectXKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final QuestionSetElements pQuestionSet;
	private final QuestionElements pQuestion;
	private final SingleChoiceElements pSingleChoice;
	private final MultipleChoiceElements pMultipleChoice;
	private final IntValueQuestionElements pIntValueQuestion;
	private final AnswerElements pAnswer;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuestionsDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQuestionSet = new QuestionSetElements();
		this.pQuestion = new QuestionElements();
		this.pSingleChoice = new SingleChoiceElements();
		this.pMultipleChoice = new MultipleChoiceElements();
		this.pIntValueQuestion = new IntValueQuestionElements();
		this.pAnswer = new AnswerElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("questions.QuestionsDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QuestionSet:
	//	"questions" name=EString questions+=Question questions+=Question*;
	public QuestionSetElements getQuestionSetAccess() {
		return pQuestionSet;
	}
	
	public ParserRule getQuestionSetRule() {
		return getQuestionSetAccess().getRule();
	}

	//Question:
	//	SingleChoice | MultipleChoice | IntValueQuestion;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//SingleChoice:
	//	"single" name=ID text=EString ":" answers+=Answer answers+=Answer*;
	public SingleChoiceElements getSingleChoiceAccess() {
		return pSingleChoice;
	}
	
	public ParserRule getSingleChoiceRule() {
		return getSingleChoiceAccess().getRule();
	}

	//MultipleChoice:
	//	"multiple" name=ID text=EString ":" answers+=Answer answers+=Answer*;
	public MultipleChoiceElements getMultipleChoiceAccess() {
		return pMultipleChoice;
	}
	
	public ParserRule getMultipleChoiceRule() {
		return getMultipleChoiceAccess().getRule();
	}

	//IntValueQuestion:
	//	"integer" name=ID text=EString "expecting" expectedValue=EInt;
	public IntValueQuestionElements getIntValueQuestionAccess() {
		return pIntValueQuestion;
	}
	
	public ParserRule getIntValueQuestionRule() {
		return getIntValueQuestionAccess().getRule();
	}

	//Answer:
	//	"[" isCorrect?="X"? "]" text=EString;
	public AnswerElements getAnswerAccess() {
		return pAnswer;
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
